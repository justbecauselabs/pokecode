// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  DeleteApiClaudeCodeSessionsBySessionIdData,
  DeleteApiClaudeCodeSessionsBySessionIdErrors,
  DeleteApiClaudeCodeSessionsBySessionIdResponses,
  GetApiClaudeCodeRepositoriesData,
  GetApiClaudeCodeRepositoriesErrors,
  GetApiClaudeCodeRepositoriesResponses,
  GetApiClaudeCodeSessionsBySessionIdAgentsData,
  GetApiClaudeCodeSessionsBySessionIdAgentsErrors,
  GetApiClaudeCodeSessionsBySessionIdAgentsResponses,
  GetApiClaudeCodeSessionsBySessionIdCommandsData,
  GetApiClaudeCodeSessionsBySessionIdCommandsErrors,
  GetApiClaudeCodeSessionsBySessionIdCommandsResponses,
  GetApiClaudeCodeSessionsBySessionIdData,
  GetApiClaudeCodeSessionsBySessionIdErrors,
  GetApiClaudeCodeSessionsBySessionIdMessagesData,
  GetApiClaudeCodeSessionsBySessionIdMessagesErrors,
  GetApiClaudeCodeSessionsBySessionIdMessagesResponses,
  GetApiClaudeCodeSessionsBySessionIdResponses,
  GetApiClaudeCodeSessionsData,
  GetApiClaudeCodeSessionsResponses,
  GetData,
  GetHealthData,
  GetHealthErrors,
  GetHealthLiveData,
  GetHealthLiveResponses,
  GetHealthReadyData,
  GetHealthReadyErrors,
  GetHealthReadyResponses,
  GetHealthResponses,
  GetResponses,
  PatchApiClaudeCodeSessionsBySessionIdData,
  PatchApiClaudeCodeSessionsBySessionIdErrors,
  PatchApiClaudeCodeSessionsBySessionIdResponses,
  PostApiClaudeCodeSessionsBySessionIdMessagesData,
  PostApiClaudeCodeSessionsBySessionIdMessagesErrors,
  PostApiClaudeCodeSessionsBySessionIdMessagesResponses,
  PostApiClaudeCodeSessionsData,
  PostApiClaudeCodeSessionsErrors,
  PostApiClaudeCodeSessionsResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetHealthResponses, GetHealthErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/health/',
    ...options,
  });
};

export const getHealthLive = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthLiveData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetHealthLiveResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/health/live',
    ...options,
  });
};

export const getHealthReady = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthReadyData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetHealthReadyResponses,
    GetHealthReadyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/health/ready',
    ...options,
  });
};

export const getApiClaudeCodeRepositories = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiClaudeCodeRepositoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiClaudeCodeRepositoriesResponses,
    GetApiClaudeCodeRepositoriesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/repositories/',
    ...options,
  });
};

export const getApiClaudeCodeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiClaudeCodeSessionsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiClaudeCodeSessionsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/',
    ...options,
  });
};

export const postApiClaudeCodeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiClaudeCodeSessionsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiClaudeCodeSessionsResponses,
    PostApiClaudeCodeSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteApiClaudeCodeSessionsBySessionId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiClaudeCodeSessionsBySessionIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiClaudeCodeSessionsBySessionIdResponses,
    DeleteApiClaudeCodeSessionsBySessionIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}',
    ...options,
  });
};

export const getApiClaudeCodeSessionsBySessionId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiClaudeCodeSessionsBySessionIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiClaudeCodeSessionsBySessionIdResponses,
    GetApiClaudeCodeSessionsBySessionIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}',
    ...options,
  });
};

export const patchApiClaudeCodeSessionsBySessionId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiClaudeCodeSessionsBySessionIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiClaudeCodeSessionsBySessionIdResponses,
    PatchApiClaudeCodeSessionsBySessionIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const getApiClaudeCodeSessionsBySessionIdMessages = <ThrowOnError extends boolean = false>(
  options: Options<GetApiClaudeCodeSessionsBySessionIdMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiClaudeCodeSessionsBySessionIdMessagesResponses,
    GetApiClaudeCodeSessionsBySessionIdMessagesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}/messages',
    ...options,
  });
};

export const postApiClaudeCodeSessionsBySessionIdMessages = <ThrowOnError extends boolean = false>(
  options: Options<PostApiClaudeCodeSessionsBySessionIdMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiClaudeCodeSessionsBySessionIdMessagesResponses,
    PostApiClaudeCodeSessionsBySessionIdMessagesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}/messages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List available slash commands
 * Discover slash commands from both user Claude home directory and project directory
 */
export const getApiClaudeCodeSessionsBySessionIdCommands = <ThrowOnError extends boolean = false>(
  options: Options<GetApiClaudeCodeSessionsBySessionIdCommandsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiClaudeCodeSessionsBySessionIdCommandsResponses,
    GetApiClaudeCodeSessionsBySessionIdCommandsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}/commands/',
    ...options,
  });
};

/**
 * List available agents
 * Discover agents from both user Claude home directory and project directory
 */
export const getApiClaudeCodeSessionsBySessionIdAgents = <ThrowOnError extends boolean = false>(
  options: Options<GetApiClaudeCodeSessionsBySessionIdAgentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiClaudeCodeSessionsBySessionIdAgentsResponses,
    GetApiClaudeCodeSessionsBySessionIdAgentsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/claude-code/sessions/{sessionId}/agents/',
    ...options,
  });
};

export const get = <ThrowOnError extends boolean = false>(
  options?: Options<GetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/',
    ...options,
  });
};

// This file is auto-generated by @hey-api/openapi-ts

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/';
};

export type GetHealthErrors = {
    /**
     * Default Response
     */
    503: {
        status: 'healthy' | 'unhealthy';
        timestamp: string;
        services: {
            database: 'healthy' | 'unhealthy' | 'unknown';
            queue: 'healthy' | 'unhealthy' | 'unknown';
        };
        version: string;
        uptime: number;
    };
};

export type GetHealthError = GetHealthErrors[keyof GetHealthErrors];

export type GetHealthResponses = {
    /**
     * Default Response
     */
    200: {
        status: 'healthy' | 'unhealthy';
        timestamp: string;
        services: {
            database: 'healthy' | 'unhealthy' | 'unknown';
            queue: 'healthy' | 'unhealthy' | 'unknown';
        };
        version: string;
        uptime: number;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetHealthLiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/live';
};

export type GetHealthLiveResponses = {
    /**
     * Default Response
     */
    200: {
        status: 'ok';
        timestamp: string;
    };
};

export type GetHealthLiveResponse = GetHealthLiveResponses[keyof GetHealthLiveResponses];

export type GetHealthReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/ready';
};

export type GetHealthReadyErrors = {
    /**
     * Default Response
     */
    503: {
        status: 'not_ready';
        timestamp: string;
        reason: string;
    };
};

export type GetHealthReadyError = GetHealthReadyErrors[keyof GetHealthReadyErrors];

export type GetHealthReadyResponses = {
    /**
     * Default Response
     */
    200: {
        status: 'ready';
        timestamp: string;
    };
};

export type GetHealthReadyResponse = GetHealthReadyResponses[keyof GetHealthReadyResponses];

export type GetApiClaudeCodeRepositoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/claude-code/repositories/';
};

export type GetApiClaudeCodeRepositoriesErrors = {
    /**
     * Default Response
     */
    500: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeRepositoriesError = GetApiClaudeCodeRepositoriesErrors[keyof GetApiClaudeCodeRepositoriesErrors];

export type GetApiClaudeCodeRepositoriesResponses = {
    /**
     * Default Response
     */
    200: {
        repositories: Array<{
            folderName: string;
            path: string;
            isGitRepository: boolean;
        }>;
        total: number;
        githubReposDirectory: string;
    };
};

export type GetApiClaudeCodeRepositoriesResponse = GetApiClaudeCodeRepositoriesResponses[keyof GetApiClaudeCodeRepositoriesResponses];

export type GetApiClaudeCodeSessionsData = {
    body?: never;
    path?: never;
    query?: {
        '~standard'?: unknown;
        def?: {
            [key: string]: unknown;
        };
        check?: unknown;
        clone?: unknown;
        brand?: unknown;
        register?: unknown;
        parse?: unknown;
        safeParse?: unknown;
        parseAsync?: unknown;
        safeParseAsync?: unknown;
        spa?: unknown;
        refine?: unknown;
        superRefine?: unknown;
        overwrite?: unknown;
        optional?: unknown;
        nullable?: unknown;
        nullish?: unknown;
        nonoptional?: unknown;
        array?: unknown;
        or?: unknown;
        and?: unknown;
        transform?: unknown;
        default?: unknown;
        prefault?: unknown;
        catch?: unknown;
        pipe?: unknown;
        readonly?: unknown;
        describe?: unknown;
        meta?: unknown;
        isOptional?: unknown;
        isNullable?: unknown;
        keyof?: unknown;
        catchall?: unknown;
        passthrough?: unknown;
        loose?: unknown;
        strict?: unknown;
        strip?: unknown;
        extend?: unknown;
        merge?: unknown;
        pick?: unknown;
        omit?: unknown;
        partial?: unknown;
        required?: unknown;
    };
    url: '/api/claude-code/sessions/';
};

export type GetApiClaudeCodeSessionsResponses = {
    /**
     * Default Response
     */
    200: {
        sessions: Array<{
            id: string;
            projectPath: string;
            name: string;
            claudeDirectoryPath: string | unknown;
            context: string | unknown;
            status: 'active' | 'idle' | 'expired';
            metadata: unknown;
            createdAt: string;
            updatedAt: string;
            lastAccessedAt: string;
            isWorking: boolean;
            currentJobId: string | unknown;
            lastJobStatus: string | unknown;
            messageCount: number;
            tokenCount: number;
        }>;
        total: number;
        limit: number;
        offset: number;
    };
};

export type GetApiClaudeCodeSessionsResponse = GetApiClaudeCodeSessionsResponses[keyof GetApiClaudeCodeSessionsResponses];

export type PostApiClaudeCodeSessionsData = {
    body?: {
        projectPath?: string;
        folderName?: string;
        context?: string;
        metadata?: {
            repository?: string;
            branch?: string;
            allowedTools?: Array<string>;
        };
    };
    path?: never;
    query?: never;
    url: '/api/claude-code/sessions/';
};

export type PostApiClaudeCodeSessionsErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
};

export type PostApiClaudeCodeSessionsError = PostApiClaudeCodeSessionsErrors[keyof PostApiClaudeCodeSessionsErrors];

export type PostApiClaudeCodeSessionsResponses = {
    /**
     * Default Response
     */
    201: {
        id: string;
        projectPath: string;
        name: string;
        claudeDirectoryPath: string | unknown;
        context: string | unknown;
        status: 'active' | 'idle' | 'expired';
        metadata: unknown;
        createdAt: string;
        updatedAt: string;
        lastAccessedAt: string;
        isWorking: boolean;
        currentJobId: string | unknown;
        lastJobStatus: string | unknown;
        messageCount: number;
        tokenCount: number;
    };
};

export type PostApiClaudeCodeSessionsResponse = PostApiClaudeCodeSessionsResponses[keyof PostApiClaudeCodeSessionsResponses];

export type DeleteApiClaudeCodeSessionsBySessionIdData = {
    body?: never;
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}';
};

export type DeleteApiClaudeCodeSessionsBySessionIdErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type DeleteApiClaudeCodeSessionsBySessionIdError = DeleteApiClaudeCodeSessionsBySessionIdErrors[keyof DeleteApiClaudeCodeSessionsBySessionIdErrors];

export type DeleteApiClaudeCodeSessionsBySessionIdResponses = {
    /**
     * Default Response
     */
    200: {
        success: boolean;
    };
};

export type DeleteApiClaudeCodeSessionsBySessionIdResponse = DeleteApiClaudeCodeSessionsBySessionIdResponses[keyof DeleteApiClaudeCodeSessionsBySessionIdResponses];

export type GetApiClaudeCodeSessionsBySessionIdData = {
    body?: never;
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}';
};

export type GetApiClaudeCodeSessionsBySessionIdErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdError = GetApiClaudeCodeSessionsBySessionIdErrors[keyof GetApiClaudeCodeSessionsBySessionIdErrors];

export type GetApiClaudeCodeSessionsBySessionIdResponses = {
    /**
     * Default Response
     */
    200: {
        id: string;
        projectPath: string;
        name: string;
        claudeDirectoryPath: string | unknown;
        context: string | unknown;
        status: 'active' | 'idle' | 'expired';
        metadata: unknown;
        createdAt: string;
        updatedAt: string;
        lastAccessedAt: string;
        isWorking: boolean;
        currentJobId: string | unknown;
        lastJobStatus: string | unknown;
        messageCount: number;
        tokenCount: number;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdResponse = GetApiClaudeCodeSessionsBySessionIdResponses[keyof GetApiClaudeCodeSessionsBySessionIdResponses];

export type PatchApiClaudeCodeSessionsBySessionIdData = {
    body?: {
        context?: string;
        metadata?: unknown;
    };
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}';
};

export type PatchApiClaudeCodeSessionsBySessionIdErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type PatchApiClaudeCodeSessionsBySessionIdError = PatchApiClaudeCodeSessionsBySessionIdErrors[keyof PatchApiClaudeCodeSessionsBySessionIdErrors];

export type PatchApiClaudeCodeSessionsBySessionIdResponses = {
    /**
     * Default Response
     */
    200: {
        id: string;
        projectPath: string;
        name: string;
        claudeDirectoryPath: string | unknown;
        context: string | unknown;
        status: 'active' | 'idle' | 'expired';
        metadata: unknown;
        createdAt: string;
        updatedAt: string;
        lastAccessedAt: string;
        isWorking: boolean;
        currentJobId: string | unknown;
        lastJobStatus: string | unknown;
        messageCount: number;
        tokenCount: number;
    };
};

export type PatchApiClaudeCodeSessionsBySessionIdResponse = PatchApiClaudeCodeSessionsBySessionIdResponses[keyof PatchApiClaudeCodeSessionsBySessionIdResponses];

export type GetApiClaudeCodeSessionsBySessionIdMessagesData = {
    body?: never;
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}/messages';
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesError = GetApiClaudeCodeSessionsBySessionIdMessagesErrors[keyof GetApiClaudeCodeSessionsBySessionIdMessagesErrors];

export type GetApiClaudeCodeSessionsBySessionIdMessagesResponses = {
    /**
     * Default Response
     */
    200: {
        messages: Array<{
            id: string;
            type: unknown;
            data: {
                content: string;
            } | {
                type: unknown;
                data: {
                    content: string;
                } | {
                    type: unknown;
                    data: {
                        todos: Array<{
                            content: string;
                            status: unknown;
                        }>;
                    };
                };
            };
            parentToolUseId: string | unknown;
        }>;
        session: {
            id: string;
            projectPath: string;
            name: string;
            claudeDirectoryPath: string | unknown;
            context: string | unknown;
            status: 'active' | 'idle' | 'expired';
            metadata: unknown;
            createdAt: string;
            updatedAt: string;
            lastAccessedAt: string;
            isWorking: boolean;
            currentJobId: string | unknown;
            lastJobStatus: string | unknown;
            messageCount: number;
            tokenCount: number;
        };
    };
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesResponse = GetApiClaudeCodeSessionsBySessionIdMessagesResponses[keyof GetApiClaudeCodeSessionsBySessionIdMessagesResponses];

export type PostApiClaudeCodeSessionsBySessionIdMessagesData = {
    body?: {
        content: string;
        allowedTools?: Array<string>;
        agent?: string;
    };
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}/messages';
};

export type PostApiClaudeCodeSessionsBySessionIdMessagesErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type PostApiClaudeCodeSessionsBySessionIdMessagesError = PostApiClaudeCodeSessionsBySessionIdMessagesErrors[keyof PostApiClaudeCodeSessionsBySessionIdMessagesErrors];

export type PostApiClaudeCodeSessionsBySessionIdMessagesResponses = {
    /**
     * Default Response
     */
    202: {
        [key: string]: unknown;
    };
};

export type PostApiClaudeCodeSessionsBySessionIdMessagesResponse = PostApiClaudeCodeSessionsBySessionIdMessagesResponses[keyof PostApiClaudeCodeSessionsBySessionIdMessagesResponses];

export type GetApiClaudeCodeSessionsBySessionIdMessagesRawData = {
    body?: never;
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}/messages/raw';
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesRawResponses = {
    /**
     * Default Response
     */
    200: unknown;
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsData = {
    body?: never;
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: {
        '~standard'?: unknown;
        def?: {
            [key: string]: unknown;
        };
        check?: unknown;
        clone?: unknown;
        brand?: unknown;
        register?: unknown;
        parse?: unknown;
        safeParse?: unknown;
        parseAsync?: unknown;
        safeParseAsync?: unknown;
        spa?: unknown;
        refine?: unknown;
        superRefine?: unknown;
        overwrite?: unknown;
        optional?: unknown;
        nullable?: unknown;
        nullish?: unknown;
        nonoptional?: unknown;
        array?: unknown;
        or?: unknown;
        and?: unknown;
        transform?: unknown;
        default?: unknown;
        prefault?: unknown;
        catch?: unknown;
        pipe?: unknown;
        readonly?: unknown;
        describe?: unknown;
        meta?: unknown;
        isOptional?: unknown;
        isNullable?: unknown;
        keyof?: unknown;
        catchall?: unknown;
        passthrough?: unknown;
        loose?: unknown;
        strict?: unknown;
        strip?: unknown;
        extend?: unknown;
        merge?: unknown;
        pick?: unknown;
        omit?: unknown;
        partial?: unknown;
        required?: unknown;
    };
    url: '/api/claude-code/sessions/{sessionId}/commands/';
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    403: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsError = GetApiClaudeCodeSessionsBySessionIdCommandsErrors[keyof GetApiClaudeCodeSessionsBySessionIdCommandsErrors];

export type GetApiClaudeCodeSessionsBySessionIdCommandsResponses = {
    /**
     * Default Response
     */
    200: {
        commands: Array<{
            name: string;
            body: string;
            type: 'user' | 'project';
        }>;
        sources: {
            userCommandsPath?: string;
            projectCommandsPath?: string;
        };
    };
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsResponse = GetApiClaudeCodeSessionsBySessionIdCommandsResponses[keyof GetApiClaudeCodeSessionsBySessionIdCommandsResponses];

export type GetApiClaudeCodeSessionsBySessionIdAgentsData = {
    body?: never;
    path: {
        '~standard': unknown;
        def: {
            [key: string]: unknown;
        };
        check: unknown;
        clone: unknown;
        brand: unknown;
        register: unknown;
        parse: unknown;
        safeParse: unknown;
        parseAsync: unknown;
        safeParseAsync: unknown;
        spa: unknown;
        refine: unknown;
        superRefine: unknown;
        overwrite: unknown;
        optional: unknown;
        nullable: unknown;
        nullish: unknown;
        nonoptional: unknown;
        array: unknown;
        or: unknown;
        and: unknown;
        transform: unknown;
        default: unknown;
        prefault: unknown;
        catch: unknown;
        pipe: unknown;
        readonly: unknown;
        describe: unknown;
        meta: unknown;
        isOptional: unknown;
        isNullable: unknown;
        keyof: unknown;
        catchall: unknown;
        passthrough: unknown;
        loose: unknown;
        strict: unknown;
        strip: unknown;
        extend: unknown;
        merge: unknown;
        pick: unknown;
        omit: unknown;
        partial: unknown;
        required: unknown;
    };
    query?: {
        '~standard'?: unknown;
        def?: {
            [key: string]: unknown;
        };
        check?: unknown;
        clone?: unknown;
        brand?: unknown;
        register?: unknown;
        parse?: unknown;
        safeParse?: unknown;
        parseAsync?: unknown;
        safeParseAsync?: unknown;
        spa?: unknown;
        refine?: unknown;
        superRefine?: unknown;
        overwrite?: unknown;
        optional?: unknown;
        nullable?: unknown;
        nullish?: unknown;
        nonoptional?: unknown;
        array?: unknown;
        or?: unknown;
        and?: unknown;
        transform?: unknown;
        default?: unknown;
        prefault?: unknown;
        catch?: unknown;
        pipe?: unknown;
        readonly?: unknown;
        describe?: unknown;
        meta?: unknown;
        isOptional?: unknown;
        isNullable?: unknown;
        keyof?: unknown;
        catchall?: unknown;
        passthrough?: unknown;
        loose?: unknown;
        strict?: unknown;
        strip?: unknown;
        extend?: unknown;
        merge?: unknown;
        pick?: unknown;
        omit?: unknown;
        partial?: unknown;
        required?: unknown;
    };
    url: '/api/claude-code/sessions/{sessionId}/agents/';
};

export type GetApiClaudeCodeSessionsBySessionIdAgentsErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    403: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdAgentsError = GetApiClaudeCodeSessionsBySessionIdAgentsErrors[keyof GetApiClaudeCodeSessionsBySessionIdAgentsErrors];

export type GetApiClaudeCodeSessionsBySessionIdAgentsResponses = {
    /**
     * Default Response
     */
    200: {
        agents: Array<{
            name: string;
            description: string;
            color?: string;
            content: string;
            type: 'user' | 'project';
        }>;
        sources: {
            userAgentsPath?: string;
            projectAgentsPath?: string;
        };
    };
};

export type GetApiClaudeCodeSessionsBySessionIdAgentsResponse = GetApiClaudeCodeSessionsBySessionIdAgentsResponses[keyof GetApiClaudeCodeSessionsBySessionIdAgentsResponses];

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetResponses = {
    /**
     * Default Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:3001' | (string & {});
};
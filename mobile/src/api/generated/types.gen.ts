// This file is auto-generated by @hey-api/openapi-ts

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/';
};

export type GetHealthErrors = {
    /**
     * Default Response
     */
    503: {
        status: 'healthy' | 'unhealthy';
        timestamp: string;
        services: {
            database: 'healthy' | 'unhealthy' | 'unknown';
            queue: 'healthy' | 'unhealthy' | 'unknown';
        };
        version: string;
        uptime: number;
    };
};

export type GetHealthError = GetHealthErrors[keyof GetHealthErrors];

export type GetHealthResponses = {
    /**
     * Default Response
     */
    200: {
        status: 'healthy' | 'unhealthy';
        timestamp: string;
        services: {
            database: 'healthy' | 'unhealthy' | 'unknown';
            queue: 'healthy' | 'unhealthy' | 'unknown';
        };
        version: string;
        uptime: number;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetHealthLiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/live';
};

export type GetHealthLiveResponses = {
    /**
     * Default Response
     */
    200: {
        status: 'ok';
        timestamp: string;
    };
};

export type GetHealthLiveResponse = GetHealthLiveResponses[keyof GetHealthLiveResponses];

export type GetHealthReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/ready';
};

export type GetHealthReadyErrors = {
    /**
     * Default Response
     */
    503: {
        status: 'not_ready';
        timestamp: string;
        reason: string;
    };
};

export type GetHealthReadyError = GetHealthReadyErrors[keyof GetHealthReadyErrors];

export type GetHealthReadyResponses = {
    /**
     * Default Response
     */
    200: {
        status: 'ready';
        timestamp: string;
    };
};

export type GetHealthReadyResponse = GetHealthReadyResponses[keyof GetHealthReadyResponses];

export type GetApiClaudeCodeRepositoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/claude-code/repositories/';
};

export type GetApiClaudeCodeRepositoriesErrors = {
    /**
     * Default Response
     */
    500: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeRepositoriesError = GetApiClaudeCodeRepositoriesErrors[keyof GetApiClaudeCodeRepositoriesErrors];

export type GetApiClaudeCodeRepositoriesResponses = {
    /**
     * Default Response
     */
    200: {
        repositories: Array<{
            /**
             * The folder name of the repository
             */
            folderName: string;
            /**
             * The absolute path to the repository
             */
            path: string;
            /**
             * Whether the folder contains a .git directory
             */
            isGitRepository: boolean;
        }>;
        total: number;
        /**
         * The configured GITHUB_REPOS_DIRECTORY
         */
        githubReposDirectory: string;
    };
};

export type GetApiClaudeCodeRepositoriesResponse = GetApiClaudeCodeRepositoriesResponses[keyof GetApiClaudeCodeRepositoriesResponses];

export type GetApiClaudeCodeSessionsData = {
    body?: never;
    path?: never;
    query?: {
        status?: 'active' | 'idle' | 'expired';
        limit?: number;
        offset?: number;
    };
    url: '/api/claude-code/sessions/';
};

export type GetApiClaudeCodeSessionsResponses = {
    /**
     * Default Response
     */
    200: {
        sessions: Array<{
            id: string;
            projectPath: string;
            name: string;
            claudeDirectoryPath?: string;
            context?: string;
            status: 'active' | 'idle' | 'expired';
            metadata?: unknown;
            createdAt: string;
            updatedAt: string;
            lastAccessedAt: string;
            isWorking: boolean;
            currentJobId?: string;
            lastJobStatus?: string;
        }>;
        total: number;
        limit: number;
        offset: number;
    };
};

export type GetApiClaudeCodeSessionsResponse = GetApiClaudeCodeSessionsResponses[keyof GetApiClaudeCodeSessionsResponses];

export type PostApiClaudeCodeSessionsData = {
    body?: {
        projectPath?: string;
        folderName?: string;
        context?: string;
        metadata?: {
            repository?: string;
            branch?: string;
            allowedTools?: Array<string>;
        };
    };
    path?: never;
    query?: never;
    url: '/api/claude-code/sessions/';
};

export type PostApiClaudeCodeSessionsErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
};

export type PostApiClaudeCodeSessionsError = PostApiClaudeCodeSessionsErrors[keyof PostApiClaudeCodeSessionsErrors];

export type PostApiClaudeCodeSessionsResponses = {
    /**
     * Default Response
     */
    201: {
        id: string;
        projectPath: string;
        name: string;
        claudeDirectoryPath?: string;
        context?: string;
        status: 'active' | 'idle' | 'expired';
        metadata?: unknown;
        createdAt: string;
        updatedAt: string;
        lastAccessedAt: string;
        isWorking: boolean;
        currentJobId?: string;
        lastJobStatus?: string;
    };
};

export type PostApiClaudeCodeSessionsResponse = PostApiClaudeCodeSessionsResponses[keyof PostApiClaudeCodeSessionsResponses];

export type DeleteApiClaudeCodeSessionsBySessionIdData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}';
};

export type DeleteApiClaudeCodeSessionsBySessionIdErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type DeleteApiClaudeCodeSessionsBySessionIdError = DeleteApiClaudeCodeSessionsBySessionIdErrors[keyof DeleteApiClaudeCodeSessionsBySessionIdErrors];

export type DeleteApiClaudeCodeSessionsBySessionIdResponses = {
    /**
     * Default Response
     */
    200: {
        success: boolean;
    };
};

export type DeleteApiClaudeCodeSessionsBySessionIdResponse = DeleteApiClaudeCodeSessionsBySessionIdResponses[keyof DeleteApiClaudeCodeSessionsBySessionIdResponses];

export type GetApiClaudeCodeSessionsBySessionIdData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}';
};

export type GetApiClaudeCodeSessionsBySessionIdErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdError = GetApiClaudeCodeSessionsBySessionIdErrors[keyof GetApiClaudeCodeSessionsBySessionIdErrors];

export type GetApiClaudeCodeSessionsBySessionIdResponses = {
    /**
     * Default Response
     */
    200: {
        id: string;
        projectPath: string;
        name: string;
        claudeDirectoryPath?: string;
        context?: string;
        status: 'active' | 'idle' | 'expired';
        metadata?: unknown;
        createdAt: string;
        updatedAt: string;
        lastAccessedAt: string;
        isWorking: boolean;
        currentJobId?: string;
        lastJobStatus?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdResponse = GetApiClaudeCodeSessionsBySessionIdResponses[keyof GetApiClaudeCodeSessionsBySessionIdResponses];

export type PatchApiClaudeCodeSessionsBySessionIdData = {
    body?: {
        context?: string;
        metadata?: unknown;
    };
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}';
};

export type PatchApiClaudeCodeSessionsBySessionIdErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type PatchApiClaudeCodeSessionsBySessionIdError = PatchApiClaudeCodeSessionsBySessionIdErrors[keyof PatchApiClaudeCodeSessionsBySessionIdErrors];

export type PatchApiClaudeCodeSessionsBySessionIdResponses = {
    /**
     * Default Response
     */
    200: {
        id: string;
        projectPath: string;
        name: string;
        claudeDirectoryPath?: string;
        context?: string;
        status: 'active' | 'idle' | 'expired';
        metadata?: unknown;
        createdAt: string;
        updatedAt: string;
        lastAccessedAt: string;
        isWorking: boolean;
        currentJobId?: string;
        lastJobStatus?: string;
    };
};

export type PatchApiClaudeCodeSessionsBySessionIdResponse = PatchApiClaudeCodeSessionsBySessionIdResponses[keyof PatchApiClaudeCodeSessionsBySessionIdResponses];

export type GetApiClaudeCodeSessionsBySessionIdMessagesData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}/messages';
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesError = GetApiClaudeCodeSessionsBySessionIdMessagesErrors[keyof GetApiClaudeCodeSessionsBySessionIdMessagesErrors];

export type GetApiClaudeCodeSessionsBySessionIdMessagesResponses = {
    /**
     * Default Response
     */
    200: {
        messages: Array<{
            id: string;
            sessionId: string;
            role: 'user' | 'assistant' | 'system';
            content: string;
            timestamp: string;
            toolCalls?: Array<{
                id?: string;
                name: string;
                input: unknown;
            }>;
            toolResults?: Array<{
                toolUseId: string;
                content: string;
                isError?: boolean;
            }>;
            thinking?: string;
            citations?: Array<{
                type: 'char_location' | 'page_location' | 'content_block_location' | 'web_search_result_location' | 'search_result_location';
                citedText: string;
                documentIndex?: number;
                documentTitle?: string;
                fileId?: string;
                startCharIndex?: number;
                endCharIndex?: number;
                startPageNumber?: number;
                endPageNumber?: number;
                startBlockIndex?: number;
                endBlockIndex?: number;
                url?: string;
                encryptedIndex?: string;
                searchResultIndex?: number;
                source?: string;
                title?: string;
            }>;
            webSearchResults?: Array<{
                type: 'web_search_result';
                url: string;
                title: string;
                encryptedContent: string;
                pageAge?: string;
            }>;
            messageType?: 'user' | 'assistant' | 'system' | 'result';
            model?: string;
            stopReason?: 'end_turn' | 'max_tokens' | 'stop_sequence' | 'tool_use' | 'pause_turn' | 'refusal' | unknown;
            stopSequence?: string | unknown;
            usage?: {
                inputTokens: number;
                outputTokens: number;
                cacheCreationInputTokens?: number;
                cacheReadInputTokens?: number;
                serviceTier?: 'standard' | 'priority' | 'batch' | unknown;
            };
            systemMetadata?: {
                cwd?: string;
                tools?: Array<string>;
                mcpServers?: Array<{
                    name: string;
                    status: string;
                }>;
                model?: string;
                permissionMode?: string;
                slashCommands?: Array<string>;
                apiKeySource?: string;
            };
            resultMetadata?: {
                subtype: 'success' | 'error_max_turns' | 'error_during_execution';
                durationMs?: number;
                durationApiMs?: number;
                isError?: boolean;
                numTurns?: number;
                result?: string;
                totalCostUsd?: number;
                usage?: {
                    inputTokens: number;
                    outputTokens: number;
                    cacheCreationInputTokens?: number;
                    cacheReadInputTokens?: number;
                    serviceTier?: 'standard' | 'priority' | 'batch' | unknown;
                };
            };
            claudeSessionId?: string;
            parentToolUseId?: string | unknown;
        }>;
        session: {
            id: string;
            name: string;
            isWorking: boolean;
            currentJobId?: string | unknown;
            lastJobStatus?: string | unknown;
            status: 'active' | 'idle' | 'expired';
        };
    };
};

export type GetApiClaudeCodeSessionsBySessionIdMessagesResponse = GetApiClaudeCodeSessionsBySessionIdMessagesResponses[keyof GetApiClaudeCodeSessionsBySessionIdMessagesResponses];

export type PostApiClaudeCodeSessionsBySessionIdMessagesData = {
    body: {
        content: string;
        allowedTools?: Array<string>;
        /**
         * Agent name to use for this message
         */
        agent?: string;
    };
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/api/claude-code/sessions/{sessionId}/messages';
};

export type PostApiClaudeCodeSessionsBySessionIdMessagesErrors = {
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type PostApiClaudeCodeSessionsBySessionIdMessagesError = PostApiClaudeCodeSessionsBySessionIdMessagesErrors[keyof PostApiClaudeCodeSessionsBySessionIdMessagesErrors];

export type PostApiClaudeCodeSessionsBySessionIdMessagesResponses = {
    /**
     * Default Response
     */
    202: {
        [key: string]: unknown;
    };
};

export type PostApiClaudeCodeSessionsBySessionIdMessagesResponse = PostApiClaudeCodeSessionsBySessionIdMessagesResponses[keyof PostApiClaudeCodeSessionsBySessionIdMessagesResponses];

export type GetApiClaudeCodeSessionsBySessionIdCommandsData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: {
        /**
         * Filter commands by type
         */
        type?: 'user' | 'project' | 'all';
        /**
         * Search commands by name or content
         */
        search?: string;
    };
    url: '/api/claude-code/sessions/{sessionId}/commands/';
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    403: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsError = GetApiClaudeCodeSessionsBySessionIdCommandsErrors[keyof GetApiClaudeCodeSessionsBySessionIdCommandsErrors];

export type GetApiClaudeCodeSessionsBySessionIdCommandsResponses = {
    /**
     * Default Response
     */
    200: {
        commands: Array<{
            /**
             * Command name (filename without .md extension)
             */
            name: string;
            /**
             * Contents of the command file
             */
            body: string;
            /**
             * Command type: user (from Claude home) or project (from repo)
             */
            type: 'user' | 'project';
        }>;
        sources: {
            /**
             * Path to user commands directory
             */
            userCommandsPath?: string;
            /**
             * Path to project commands directory
             */
            projectCommandsPath?: string;
        };
    };
};

export type GetApiClaudeCodeSessionsBySessionIdCommandsResponse = GetApiClaudeCodeSessionsBySessionIdCommandsResponses[keyof GetApiClaudeCodeSessionsBySessionIdCommandsResponses];

export type GetApiClaudeCodeSessionsBySessionIdAgentsData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: {
        /**
         * Filter agents by type
         */
        type?: 'user' | 'project' | 'all';
        /**
         * Search agents by name or description
         */
        search?: string;
    };
    url: '/api/claude-code/sessions/{sessionId}/agents/';
};

export type GetApiClaudeCodeSessionsBySessionIdAgentsErrors = {
    /**
     * Default Response
     */
    400: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    403: {
        error: string;
        code?: string;
    };
    /**
     * Default Response
     */
    404: {
        error: string;
        code?: string;
    };
};

export type GetApiClaudeCodeSessionsBySessionIdAgentsError = GetApiClaudeCodeSessionsBySessionIdAgentsErrors[keyof GetApiClaudeCodeSessionsBySessionIdAgentsErrors];

export type GetApiClaudeCodeSessionsBySessionIdAgentsResponses = {
    /**
     * Default Response
     */
    200: {
        agents: Array<{
            /**
             * Agent name from YAML frontmatter
             */
            name: string;
            /**
             * Agent description from YAML frontmatter
             */
            description: string;
            /**
             * Agent color from YAML frontmatter
             */
            color?: string;
            /**
             * Main content of the agent file (after frontmatter)
             */
            content: string;
            /**
             * Agent type: user (from Claude home) or project (from repo)
             */
            type: 'user' | 'project';
        }>;
        sources: {
            /**
             * Path to user agents directory
             */
            userAgentsPath?: string;
            /**
             * Path to project agents directory
             */
            projectAgentsPath?: string;
        };
    };
};

export type GetApiClaudeCodeSessionsBySessionIdAgentsResponse = GetApiClaudeCodeSessionsBySessionIdAgentsResponses[keyof GetApiClaudeCodeSessionsBySessionIdAgentsResponses];

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetResponses = {
    /**
     * Default Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:3001' | (string & {});
};
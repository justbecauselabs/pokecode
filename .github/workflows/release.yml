name: Release CLI Binaries

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Optional semver to release (e.g., 0.1.1). Leave blank for automatic patch bump.'
        required: false
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Determine release version
        id: determine_version
        run: |
          cd packages/cli
          CURRENT_VERSION=$(bun exec jq -r '.version' package.json)
          INPUT_VERSION_RAW="${{ github.event.inputs.semver }}"
          INPUT_VERSION=$(echo "$INPUT_VERSION_RAW" | tr -d '[:space:]')
          if [ -n "$INPUT_VERSION" ]; then
            STRIPPED_VERSION=${INPUT_VERSION#v}
            if [ -z "$STRIPPED_VERSION" ]; then
              echo "Provided semver is invalid: $INPUT_VERSION_RAW"
              exit 1
            fi
            RELEASE_VERSION="$STRIPPED_VERSION"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
              echo "Unable to parse current version: $CURRENT_VERSION"
              exit 1
            fi
            PATCH=$((10#$PATCH + 1))
            RELEASE_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "release_tag=v$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "previous_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update CLI version
        run: |
          cd packages/cli
          # Update version in package.json
          bun exec jq --arg version "${{ steps.determine_version.outputs.release_version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
      - name: Build CLI for Linux x64
        run: |
          cd packages/cli
          bun build src/cli.ts --compile --target=bun-linux-x64 --outfile dist/pokecode-linux-x64
          
      - name: Build CLI for macOS x64
        run: |
          cd packages/cli
          bun build src/cli.ts --compile --target=bun-darwin-x64 --outfile dist/pokecode-macos-x64
          
      - name: Build CLI for macOS ARM64
        run: |
          cd packages/cli
          bun build src/cli.ts --compile --target=bun-darwin-arm64 --outfile dist/pokecode-macos-arm64
          
      - name: Build CLI for Windows x64
        run: |
          cd packages/cli
          bun build src/cli.ts --compile --target=bun-windows-x64 --outfile dist/pokecode-windows-x64.exe
          
      - name: Make binaries executable
        run: |
          chmod +x packages/cli/dist/pokecode-*
          
      - name: Create checksums
        run: |
          cd packages/cli/dist
          sha256sum pokecode-* > checksums.txt
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine_version.outputs.release_tag }}
          name: Release ${{ steps.determine_version.outputs.release_tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            packages/cli/dist/pokecode-linux-x64
            packages/cli/dist/pokecode-macos-x64
            packages/cli/dist/pokecode-macos-arm64
            packages/cli/dist/pokecode-windows-x64.exe
            packages/cli/dist/checksums.txt
          body: |
            ## Pok√©Code CLI ${{ steps.determine_version.outputs.release_version }}
            
            ### Installation
            
            Download the appropriate binary for your platform:
            
            **Linux (x64):**
            ```bash
            curl -L -o pokecode https://github.com/justbecauselabs/pokecode/releases/download/${{ steps.determine_version.outputs.release_tag }}/pokecode-linux-x64
            chmod +x pokecode
            sudo mv pokecode /usr/local/bin/
            ```
            
            **macOS (Intel):**
            ```bash
            curl -L -o pokecode https://github.com/justbecauselabs/pokecode/releases/download/${{ steps.determine_version.outputs.release_tag }}/pokecode-macos-x64
            chmod +x pokecode
            sudo mv pokecode /usr/local/bin/
            ```
            
            **macOS (Apple Silicon):**
            ```bash
            curl -L -o pokecode https://github.com/justbecauselabs/pokecode/releases/download/${{ steps.determine_version.outputs.release_tag }}/pokecode-macos-arm64
            chmod +x pokecode
            sudo mv pokecode /usr/local/bin/
            ```
            
            **Windows:**
            Download `pokecode-windows-x64.exe` and add it to your PATH.
            
            ### Verify Installation
            ```bash
            pokecode --version
            pokecode --help
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/cli/package.json
          git commit -m "Bump CLI version to ${{ steps.determine_version.outputs.release_version }}" || exit 0
          git push
